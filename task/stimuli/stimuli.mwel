// stimulus/image_file
// path=/path/to/image.png

resource ('image')

// A simple gray background screen.
blank_screen background_screen(
    color = background_color,background_color,background_color
    )

//================================================================
// Core Task Stimuli
//================================================================

image_file monkey_face (
    path = 'image/monkey_face.png' 
    x_size = 6
    y_size = 6
    x_position = targetX
    y_position = targetY
    alpha_multiplier = overlap_alpha
    // rotation = (now() / 1e6) * wedge_rotation_speed
    deferred = NO
    )

image_file monkey_scrambled (
    path = 'image/monkey_scrambled.png' 
    x_size = 6
    y_size = 6
    x_position = targetSX
    y_position = targetSY
    alpha_multiplier = overlap_alpha
    // rotation = (now() / 1e6) * wedge_rotation_speed
    deferred = NO
    )

//================================================================
// Masks & Occluders
//================================================================

var W = display_bounds("right")   // 24.6984 in your log
var H = display_bounds("top")     // 13.8927 in your log

image_file noise_mask_fullscreen (
    path = 'image/noise_mask.png'
    fullscreen = YES            // Completely covers the display, ignores x/y size
)

image_file occluder_left (
    path = 'image/noise_mask_left.png'
    fullscreen = YES
)

image_file occluder_right (
    path = 'image/noise_mask_right.png'
    fullscreen = YES
)

//================================================================
// Fixation
//================================================================

group 'Fixation' {
    stimulus/fixation_point fixCircleStatic ( // fixation_point
            color = fix_red_static,fix_green_static,fix_blue_static
            trigger_width = fix_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_fix_static
            x_size = fix_sz
            y_size = fix_sz
            x_position = fixX
            y_position = fixY-fixY_offset
            rotation = 0
            alpha_multiplier = fix_alpha
    )
}

//================================================================
// Response Cues & Windows
//================================================================

group 'correctDot'{
    stimulus/circle correctDot (
            color = fix_red_static,fix_green_static,fix_blue_static
            x_size = 3
            y_size = 3
            x_position = targetX
            y_position = targetY
            alpha_multiplier = dot_alpha
    )
}

group 'wrongDot'{
    stimulus/circle wrongDot (
            color = fix_red_static,fix_green_static,fix_blue_static
            x_size = 3
            y_size = 3
            x_position = targetSX
            y_position = targetSY
            alpha_multiplier = dot_alpha
    )
}

group 'target_window'{
    stimulus/fixation_point target_window ( // circular_fixation_point
            color = target_red,target_green,target_blue
            trigger_width = target_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_target
            x_size = target_sz
            y_size = target_sz
            x_position = targetX
            y_position = targetY
            alpha_multiplier = target_alpha
    )
}

group 'nontarget_window'{
    stimulus/fixation_point nontarget_window ( // circular_fixation_point
            color = target_red,target_green,target_blue
            trigger_width = target_win
            trigger_watch_x  = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_nontarget
            x_size = target_sz
            y_size = target_sz
            x_position = targetSX
            y_position = targetSY
            alpha_multiplier = target_alpha
    )
}



group 'number_keypad'{
    stimulus/text number_keypad1 (
        text=(string) number_key_input[0]
        font_name="Helvetica Neue"
        font_size=64

        color = keypad_red, keypad_green, keypad_blue
        text_alignment = center
        x_size = number_key_sz
        y_size = number_key_sz
        rotation = 0
        x_position = -number_key_xoffset
        y_position = number_key_yoffset
        alpha_multiplier = 1
    )
    stimulus/text number_keypad2 (
        text=(string) number_key_input[1]
        font_name="Helvetica Neue"
        font_size=64

        color = keypad_red, keypad_green, keypad_blue
        text_alignment = center
        x_size = number_key_sz
        y_size = number_key_sz
        rotation = 0
        x_position = number_key_xoffset
        y_position = number_key_yoffset
        alpha_multiplier = 1
    )
}

stimulus/white_noise_background white_noise(
    randomize_on_draw=YES
)

frame_list dynamic_noise (
    loop = true
    autoplay = true
    ) {
    white_noise_background (
        randomize_on_draw = true
        )
}


group 'overlap_obj'{
    stimulus/circle overlap_obj (
            color = overlap_red,overlap_green,overlap_blue
            x_size = overlap_sz
            y_size = overlap_sz
            x_position = overlapX
            y_position = overlapY
            alpha_multiplier = overlap_alpha
    )
}

group 'hint_obj'{
    stimulus/circle hint_obj (
            color = overlap_red,overlap_green,overlap_blue
            x_size = overlap_sz
            y_size = overlap_sz
            x_position = overlapX
            y_position = overlapY
            alpha_multiplier = hint_alpha
    )
}

frame_list memory_obj_list (
    stimulus_group = memory_objs
    loop = true
    autoplay = true
    )

stimulus_group memory_objs {
    stimulus/circle memory_obj (
            color = overlap_red,overlap_green,overlap_blue
            x_size = overlap_sz
            y_size = overlap_sz
            x_position = overlapX
            y_position = overlapY
            alpha_multiplier = 1 - ((next_frame_time()/1e3-start_time/1e3)/overlapTimeDur)
    )
}


var local_index = 0 (scope = local)

var objectsX=[1:number_set[n_number_set-1]]
var objectsY=[1:number_set[n_number_set-1]]

stimulus_group objects { // indexable by objects[index]
    range_replicator (
        variable = local_index
        from = 0
        to = number_set[n_number_set-1]-1
        step = 1
        ) {

        stimulus/text object${local_index}(
            text=')'
            font_name="Capitals"
            font_size=64
            color = object_red,object_green,object_blue
            text_alignment = center
            x_size = object_sz
            y_size = object_sz
            rotation = object_theta
            x_position = objectsX[${local_index}]
            y_position = objectsY[${local_index}]-object_offsetY
            alpha_multiplier = object_alpha
            )
    }
}

stimulus_group dots {
    range_replicator (
        variable = local_index
        from = 0
        to = number_set[n_number_set-1]-1
        step = 1
        ) {

        stimulus/circle dot${local_index}(
            color = dot_red[${local_index}],dot_green[${local_index}],dot_blue[${local_index}]
            x_size = dot_sz
            y_size = dot_sz
            x_position = dotX[${local_index}]
            y_position = dotY[${local_index}]
            alpha_multiplier = dot_alpha
            )
    }
}

group 'dot'{
    stimulus/circle dot (
            color = dot_red,dot_green,dot_blue
            x_size = dot_sz
            y_size = dot_sz
            //x_position = dotX[${local_index}]
            //y_position = dotY[${local_index}]
            x_position = dotXpos
            y_position = dotYpos
            alpha_multiplier = dot_alpha
    )
}

group 'number_line'{
    stimulus/image_file number_line (
        path='image/number_line.png'
        // '/Users/hansem/Desktop/number_line.png'
        // '/Users/hansem/Dropbox (MIT)/number/codes/NumberEstimation/task/stimuli/number_line.png'
        // './stimuli/number_line.png' // 'stimuli/number_line.png'
        x_size = line_size // 16 degree (orignal image:x)
        x_position = line_x
        y_position = line_y
        rotation =  line_theta
    )
}

group 'error_line'{
    stimulus/rectangle error_line(
        color = error_line_red,error_line_green,error_line_blue
        x_position = error_lineX
        y_position = error_lineY
        x_size = error_line_szX
        y_size = error_line_szY
        rotation = line_theta
    )
}

/* to be debugged
group 'chosen_target'{
    stimulus/layer chosen_target {
        stimulus/rectangle {
            color = 1,0,0
            fullscreen = YES
        }
    /*
        stimulus/image_file chosen_target_number_line (
            path='image/number_line.png'
            x_size = line_size // 15 degree (orignal image:800 x 20 pix)
            y_size = 30
            x_position = line_x
            y_position = 0 // line_y
            rotation =  line_theta
            fullscreen = YES
        )

    */
        mask (
            mask = rectangle // ellipse // gaussian // std_dev
            // inverted = YES // false // true
            x_size = 1
            x_position = responseX
            y_position = 0 // line_y
        )
    }
}
*/

group 'Photodiode'{
        stimulus/ellipse photodiode(
        color = photodiode_red,photodiode_green,photodiode_blue
        x_size = photodiode_size
        y_size = photodiode_size
        x_position = photodiodeX
        y_position = photodiodeY
        rotation = 0
        alpha_multiplier = 1
    )
}


iodevice/stimulus_display( // % distance 66, width 53, height 30 cm -> atand(height/2/distance)*2; % 25.6 deg
    background_color = 0,0,0
    )


frame_list wedges_list (
    stimulus_group = wedges
    loop = YES
    autoplay = YES
    )

stimulus_group wedges {
    image_file wedge (
        path = 'image/wedge.png'
        x_size = wedge_sizex
        y_size = wedge_sizey
        rotation = (now() / 1e6) * wedge_rotation_speed
        deferred = NO
        )
}


var ind = 0 (scope = local)

stimulus_group monkeyFaces {
    range_replicator (
        variable = ind
        from = 1
        to = 9
        step = 1
        ) {
        image_file monkeyFace${ind} (
            path = 'image/intact monkey faces/m${ind}.jpg'
            x_size = 5
            y_size = 5
            x_position = targetX
            y_position = targetY
            alpha_multiplier = overlap_alpha
            deferred = No
            )
    }
}







image_file wedge_static (
    path = 'image/wedge.png' // 'stimuli/hm.png'
    x_size = wedge_sizex
    y_size = wedge_sizey
    rotation = (now() / 1e6) * wedge_rotation_speed
    deferred = NO
    )

circle inner_mask (
    color = 0.5,0.5,0.5
    x_size = innermask_size
    y_size = innermask_size
    rotation = 0
    )

frame_list checkerboards_list (
    stimulus_group = checkerboards
    loop = YES
    autoplay = YES
    )

stimulus_group checkerboards {
    image_file checkerboard (
        path = 'image/checkerboard.png' // was checkerboard2 for partial_wedge
        x_size = checkerboard_size
        y_size = checkerboard_size
        rotation = (now() / 1e6) * checkerboard_rotation_speed
        deferred = NO
        alpha_multiplier = 1
        )
}




stimulus/text wait_for_TTL (
    text='WAIT FOR TTL ("S")'
    font_name="Helvetica Neue"
    font_size=64

    color = 0, 0, 0
    text_alignment = center
    x_size = 15
    y_size = 3
    rotation = 0
    x_position = 0
    y_position = -5
    alpha_multiplier = 1
)

