
/*  Fix Flash Task

    - fix with distractor task
    - 24.08.21 somang -- not finished

   */

///////////////////////////////////////////////////////////////////////////////
//
// Choose platform
//
///////////////////////////////////////////////////////////////////////////////

var subject = 'monkey' // 'human'
//%define human
%define monkey

%define laptop
// %define psychophysics
// %define monkey_train
// %define monkey_ephys // labjack photodiode

// var platform = 'laptop' // mouse keyboard
// var platform = 'psychophysics' // human
var platform = 'monkey_train' // eyelink keyboard
// var platform = 'monkey_ephys'

///////////////////////////////////////////////////////////////////////////////
//
// I/O Devices
//
///////////////////////////////////////////////////////////////////////////////

%ifdef laptop
    %include 'hand_interfaces/keyboard'
    %include 'eye_interfaces/mouse'
%end

%ifdef psychophysics // mouse?
    %include 'hand_interfaces/keyboard'
    %include 'eye_interfaces/eyelink'
%end

%ifdef monkey_train
    %include 'hand_interfaces/keyboard'
    %include 'eye_interfaces/eyelink'
    %include 'reward_interfaces/labjack'
%end

%ifdef monkey_ephys
    %include 'hand_interfaces/keyboard'
    %include 'eye_interfaces/eyelink'
    %include 'reward_interfaces/labjack'
%end

///////////////////////////////////////////////////////////////////////////////
//
// Set data file, pwd, and python_site_packages
//
///////////////////////////////////////////////////////////////////////////////

var pwd = ""
var python_site_packages = ""
python_file ('set_pwd.py')
python_file('set_stimuli.py')

data_file ("$pwd/logs/$(date('%Y_%m_%d'))/mworks/$(date('%Y_%m_%d_%H_%M_%S'))")

///////////////////////////////////////////////////////////////////////////////
//
// Sounds
//
///////////////////////////////////////////////////////////////////////////////

// These directories are copied to the machine running MWServer
resource ('sounds')

sound/wav_file success_sound ('sounds/success.wav')
sound/wav_file failure_sound ('sounds/failure.wav')
sound/wav_file pong_sound ('sounds/pong.wav')
sound/wav_file start_sound ('sounds/start.wav')

///////////////////////////////////////////////////////////////////////////////
//
// Variables
//
///////////////////////////////////////////////////////////////////////////////

%include 'stimuli/variables'

///////////////////////////////////////////////////////////////////////////////
//
// Stimuli
//
///////////////////////////////////////////////////////////////////////////////

%include 'stimuli/stimuli'

///////////////////////////////////////////////////////////////////////////////
// ACTIONS
///////////////////////////////////////////////////////////////////////////////

%include 'stimuli/actions'

///////////////////////////////////////////////////////////////////////////////
//
// subfunctions
//
///////////////////////////////////////////////////////////////////////////////
%define compute_distance (x1,x2,y1,y2)  sqrt(pow(x1-x2,2)+pow(y1-y2,2))
%define sample_position ()
    sample_radius=rand(fix_sz,object_convexhull_radius) // given object_overlap_threshold=0.5, fix_sz=1
    sample_theta=rand(0,2*pi())

    sampleX = sample_radius*cos(sample_theta)
    sampleY = sample_radius*sin(sample_theta)
%end

%define sample_trial ()

    // sample number
    number_id = disc_rand(0,n_number_set-1) // e.g., 0 1
    number_id = (int) number_id
    number = number_set[number_id] // e.g., 2 6

    index=0 // initialize variables
    while (index<(number)){
        dotX[index]=0
        dotY[index]=0

        dotX0[index]=0
        dotY0[index]=0

        dot_red[index]=1
        dot_green[index]=1
        dot_blue[index]=1

        // bring 1-by-1 slots
        relative_target_x = ((index+1)-number_range[0])/(number_range[1]-number_range[0]) // 0 to 1
        dotX_final[index] = line_x+(relative_target_x-(1/2))*line_size*cos(line_theta)
        dotY_final[index] = line_y+(relative_target_x-(1/2))*line_size*sin(line_theta)

        index=index+1
    }


    // sample object locations
    run_python_string('stim.reset()') // update dotX0, dotX dotY0, dotY, dot_sz

    relative_target_x = (number-number_range[0])/(number_range[1]-number_range[0]) // 0 to 1
    objectX = line_x+(relative_target_x-(1/2))*line_size*cos(line_theta)  // for correct answer
    targetX = line_x+(relative_target_x-(1/2))*line_size*cos(line_theta) // [-16/3 0] degree // for target window
    objectY = line_y+(relative_target_x-(1/2))*line_size*sin(line_theta)
    targetY = line_y+(relative_target_x-(1/2))*line_size*sin(line_theta)

    // sample durations
    fixTimeDur = -fixTimeDurMean * logn(rand(0,1)) + fixTimeDurMin
    overlapTimeDur = -overlapDurMean * logn(rand(0,1)) + overlapDurMin  
    numberTimeDur=-numberTimeDurMean*logn(rand(0,1)) + numberTimeDurMin
    memoryTimeDur=-memoryTimeDurMean*logn(rand(0,1)) + memoryTimeDurMin // for now, movie
    targetTimeDur=-targetTimeDurMean*logn(rand(0,1)) + targetTimeDurMin


%end


///////////////////////////////////////////////////////////////////////////////
//
// Protocols
//
///////////////////////////////////////////////////////////////////////////////

protocol 'fixation_with_MovingDots'  {
    start_device_io (eye_tracker)
    current_key_input = -1

    run_python_string('stim = SetStimuli()')

    report('designed # set: $number_set')
    report('sampled # set: $number_set_sampled')

    %ifdef monkey_train
        start_io_device (labjack)
    %end

    update_stimulus_display ()
    task Trials {
        state 'Initial' {
            localTrials = 0
            CorrectTrials = 0
            IncorrectTrials = 0
            tmp=0
            while (tmp<(n_number_set)){ // count # correct trials for each number
                CorrectTrialsTarget[tmp]=0
                IncorrectTrialsTarget[tmp]=0
                tmp=tmp+1
            }
            sample_trial () // durations & target location

            goto ('Fix On')
        }

        state 'Fix On' {

            live_queue_stimulus(fixCircleStatic)

            update_stimulus_display ()
            tStart = now()
            startTrial = 1
            id_bad = 0

            start_timer (
                timer = fixWait
                duration = fixWaitDur // 10000
                duration_units = ms
                )
            goto (
                target = 'Static Fix'
                when = on_fix_static
                )
            timer_expired (
                target = 'Failure to fixate'
                timer = fixWait
                )
        }

        state 'Static Fix' {
            report ('localTrials = $localTrials')
            localTrials = localTrials+1

            tFix = now()
            id_bad = 1

            start_timer (
                timer = StaticFixWait
                duration = fixTimeDur // fixTimeDur=-fixTimeDurMean*logn(rand(0,1)) + fixTimeDurMin // exp_rand(fixTimeDurMean,fixTimeDurMin)
                duration_units = ms
                )
            goto (
                target = 'Bad'
                when = !on_fix_static
                )
            timer_expired (
                target = 'Number On'
                timer = StaticFixWait
                )
        }
        state 'Number On' {
            tNumberOn = next_frame_time()

            %ifdef monkey_ephys
                queue_stimulus(photodiode)
            %end

            index=0
            while (index<number){
                queue_stimulus(dots[index])
                index=index+1
            }

            update_stimulus_display () // 25ms from labjack
            id_bad = 2

            labjack_cue_on = 1

            start_timer (
                timer = timer_number_on
                duration = numberTimeDur
                duration_units = ms
                )
            goto (
                target = 'Bad'
                when = !on_fix_static  || current_key_input != -1
                )
            timer_expired (
                target = 'Memory'
                timer = timer_number_on
                )
        }

        state 'Memory' { // mask for human
            tNumberOff = next_frame_time()
            id_bad = 3

            // dot animation
            %ifdef monkey
                queue_stimulus(number_line) // originally presented in 'target on'
                queue_stimulus(bring_dots_to_target)
                index=0
                while (index<number){
                    live_queue_stimulus(dots[index])
                    index=index+1
                }
            %end

            %ifdef monkey_ephys
                dequeue_stimulus(photodiode)
            %end

            update_stimulus_display () // 40ms from labjack

            labjack_cue_on = 0

            start_timer (
                timer = timer_memory
                duration = memoryTimeDur
                duration_units = ms
                )
            goto (
                target = 'Bad'
                when = !on_fix_static  || current_key_input != -1
                )
            timer_expired (
                target = 'Flash Off'
                timer = timer_memory
                )
        }


        state 'Flash Off' { // mask for human
            tNumberOff = next_frame_time()
            id_bad = 3

            index=0
            while (index<number){
                dequeue_stimulus(dots[index])
                index=index+1
            }

            %ifdef monkey_ephys
                dequeue_stimulus(photodiode)
            %end
        
            dequeue_stimulus(number_line)

            update_stimulus_display () // 40ms from labjack

            labjack_cue_on = 0

            start_timer (
                timer = timer_memory
                duration = 200
                duration_units = ms
                )
            goto (
                target = 'Bad'
                when = !on_fix_static
                )
            timer_expired (
                target = 'Fix Off'
                timer = timer_memory
                )
        }

        state 'Fix Off' {
            id_bad = 5

            dequeue_stimulus(fixCircleStatic)
            update_stimulus_display ()

            tFixOff= now() // next_frame_time()

            labjack_fix_off=1

            goto (
                target = 'Reward'
                )
        }

       
        state 'Reward' {
            labjack_target_on = 0

            action/play_sound(success_sound)

            report ('Success!: CorrectTrials = $CorrectTrials')
            tRew = now()

            %ifdef monkey_ephys
                queue_stimulus(photodiode)
                update_stimulus_display ()
            %end

            CorrectTrials = CorrectTrials+1

            pulse ( // micro seconds
                variable = reward_line
                duration = rewardDur*1000
                )

            start_timer (
                timer = GreenTime
                duration = rewardDur // 200
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = GreenTime
                )
        }

        state 'End Trial' {
            tEnd = now()

            endTrial = endTrial+1

            // reset stimulus
            object_red=1 // target_red=1
            object_green=0.5
            object_blue=0 // target_blue=1
            object_alpha = 1 // target_alpha = 1

            elapsed_time = 0
            elapsed_time2 = 0 // for reducing contrast

            fix_red_static = 1
            fix_green_static = 1
            fix_blue_static = 1

            error_line_green = 1
            error_line_blue = 1

            reward_count=0

            dequeue_stimulus (fixCircleStatic)
            dequeue_stimulus(photodiode)
            dequeue_stimulus(overlap_obj)
            dequeue_stimulus(number_line)
            dequeue_stimulus(bring_dots_to_target)

            index=0
            while (index<number){
                dequeue_stimulus(dots[index])
                dot_red[index] = 1
                dot_green[index] = 1
                dot_blue[index] = 1
                index=index+1
            }

            id_bad = 0

            flag_response=0
            targetWait=targetWait0

            update_stimulus_display ()
            labjack_target_on = 0
            labjack_fix_off = 0
            labjack_cue_on = 0

            goto (
                target = 'Exit System'
                when = CorrectTrials >= trialNum
                )
            goto (
                target = 'Exit System'
                when = pstop
                )
            goto (ITI)
        }
        state ITI {

            sample_trial () // duration and target locations

            // override eye_x eye_y to reset trigger_flag
            // eye_x=100

            start_timer (
                timer = fix_pur_ITI
                duration = ITI // 500
                duration_units = ms
                )
            timer_expired (
                target = 'Fix On'
                timer = fix_pur_ITI
                )
        }

        state 'Failure to fixate' {
            report ('Trial Failed: id_bad = $id_bad')
            tResponse= now()

            start_timer (
                timer = NoFixWait
                duration = NoFixWaitDur  // 2000
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = NoFixWait
                )
        }

        state 'Bad' {
            report ('Trial Failed: id_bad = $id_bad')
            tResponse= now()

            if (id_bad==1 || id_bad==2 || id_bad==3 || id_bad==4){ // fixation number memory target

                // red fixation
                fix_green_static = 0
                fix_blue_static = 0

                index=0
                while (index<number){
                dequeue_stimulus(dots[index])
                index=index+1
                }
                dequeue_stimulus(number_line)

                dequeue_stimulus(fixCircleStatic)
                dequeue_stimulus(photodiode)
                dequeue_stimulus(overlap_obj)
                dequeue_stimulus(number_line)
                dequeue_stimulus(bring_dots_to_target)

                update_stimulus_display ()
                labjack_target_on = 0
                labjack_cue_on = 0
                action/play_sound(failure_sound)

            }

            if (id_bad==5 || id_bad==6){ // fixoff response

                labjack_cue_on = 1

                action/play_sound(failure_sound)

            }

            start_timer (
                timer = timer_timeout
                duration = timeout // 2000
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = timer_timeout
                )
        }


        state 'Exit System' {
            report ('Leaving state system')
            yield ()
        }
    }
}
