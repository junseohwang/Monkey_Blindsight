
/*  Number Estimation (NE) task

    - banana as target
    - use only fixed sets [2 6] for training
    - implement movie that brings banana to targets for supervised learning
    - based on MemorySaccadeNumber.mwel
    - MODIFY platform according to your system

 TBD: for test set, use python_image_stimulus
    -  movvie for filling up slots in number line

   */

///////////////////////////////////////////////////////////////////////////////
//
// Choose platform
//
///////////////////////////////////////////////////////////////////////////////

// var platform = 'monkey_train' // eyelink keyboard
// var platform = 'monkey_ephys'
var platform = 'laptop' // mouse keyboard
// var platform = 'psychophysics'
// var platform = 'desktop'

%define laptop
%define monkey
// %define monkey_ephys // labjack photodiode

///////////////////////////////////////////////////////////////////////////////
//
// I/O Devices
//
///////////////////////////////////////////////////////////////////////////////

%ifdef laptop
    %include 'hand_interfaces/keyboard'
    %include 'eye_interfaces/mouse'
%end

%ifdef monkey_train
    %include 'hand_interfaces/keyboard'
    %include 'eye_interfaces/eyelink'
    %include 'reward_interfaces/firmata_train'
%end

// Include one of the following hand interfaces:
// %include 'hand_interfaces/keyboard' // debug
// %include 'hand_interfaces/gamepad'
// %include 'hand_interfaces/joystick'
// %include 'hand_interfaces/joystick_monkey' // debug

// Include one of the following eye interfaces
// %include 'eye_interfaces/mouse' // debug
// %include 'eye_interfaces/eyelink' // debug

// Include one of the following reward system
// %include 'reward_interfaces/labjack' // debug
// %include 'reward_interfaces/firmata_ephys' // debug
// %include 'reward_interfaces/firmata_train' // debug

///////////////////////////////////////////////////////////////////////////////
//
// Set data file, pwd, and python_site_packages
//
///////////////////////////////////////////////////////////////////////////////

var pwd = ""
var python_site_packages = ""
python_file ('set_pwd.py')

data_file ("$pwd/logs/$(date('%Y_%m_%d'))/mworks/$(date('%Y_%m_%d_%H_%M_%S'))")

///////////////////////////////////////////////////////////////////////////////
//
// Sounds
//
///////////////////////////////////////////////////////////////////////////////

// These directories are copied to the machine running MWServer
resource ('sounds')

sound/wav_file success_sound ('sounds/success.wav')
sound/wav_file failure_sound ('sounds/failure.wav')
sound/wav_file pong_sound ('sounds/pong.wav')

///////////////////////////////////////////////////////////////////////////////
//
// Variables
//
///////////////////////////////////////////////////////////////////////////////

%include 'stimuli/variables'

///////////////////////////////////////////////////////////////////////////////
//
// Stimuli
//
///////////////////////////////////////////////////////////////////////////////

%include 'stimuli/stimuli'

///////////////////////////////////////////////////////////////////////////////
// ACTIONS
///////////////////////////////////////////////////////////////////////////////

%include 'stimuli/actions'

///////////////////////////////////////////////////////////////////////////////
//
// subfunctions
//
///////////////////////////////////////////////////////////////////////////////

%define compute_distance (x1,x2,y1,y2)  sqrt(pow(x1-x2,2)+pow(y1-y2,2))
%define sample_position ()
    sample_radius=rand(fix_sz,object_convexhull_radius) // given object_overlap_threshold=0.5, fix_sz=1
    sample_theta=rand(0,2*pi())

    sampleX = sample_radius*cos(sample_theta)
    sampleY = sample_radius*sin(sample_theta)
%end

%define sample_trial ()

    // sample number
    number_id = disc_rand(0,n_number_set-1) // e.g., 0 1
    number_id = (int) number_id
    number = number_set[number_id] // e.g., 2 6

    // TBD sample size, orientation

    // sample object locations
    index=0 // initialize
    while (index<(number_max)){
        objectsX[index]=0
        objectsY[index]=0

        objectsX0[index]=0
        objectsY0[index]=0
        index=index+1
    }

    index=0 // actual sampling
    while (index<(number_set[number_id])){
        sample_position ()

        // rejection if too close to the existing
        tmp=0
        while (tmp<index){
            while(compute_distance(objectsX[tmp],sampleX,objectsY[tmp],sampleY) < object_overlap_threshold){
                sample_position ()
            }
            tmp=tmp+1
        }
        objectsX0[index]=sampleX // initial positions
        objectsY0[index]=sampleY

        objectsX[index]=sampleX
        objectsY[index]=sampleY

        index=index+1
    }

    relative_target_x = (number-number_range[0])/(number_range[1]-number_range[0]) // 0 to 1

    objectX_final = line_x+(relative_target_x-(1/2))*line_size*cos(line_theta) // [-16/3 0] degree
    targetX = objectX_final // for target window
    objectX = objectX_final // for correct answer

    objectY_final = line_y+(relative_target_x-(1/2))*line_size*sin(line_theta)
    targetY = objectY_final
    objectY = objectY_final

    // sample durations
    fixTimeDur=-fixTimeDurMean*logn(rand(0,1)) + fixTimeDurMin // exp_rand(fixTimeDurMean,fixTimeDurMin)
    numberTimeDur=-numberTimeDurMean*logn(rand(0,1)) + numberTimeDurMin
    memoryTimeDur=-memoryTimeDurMean*logn(rand(0,1)) + memoryTimeDurMin // for now, movie
    targetTimeDur=-targetTimeDurMean*logn(rand(0,1)) + targetTimeDurMin

%end

///////////////////////////////////////////////////////////////////////////////
//
// Protocols
//
///////////////////////////////////////////////////////////////////////////////

protocol 'NumberEstimation_banana' {
    start_device_io (eye_tracker)

    %ifdef monkey_ephys
        start_io_device (labjack) // debug
    %end

    update_stimulus_display ()
    task Trials {
        state 'Initial' {
            localTrials = 0
            CorrectTrials = 0
            IncorrectTrials = 0
            tmp=0
            while (tmp<(n_number_set)){
                CorrectTrialsTarget[tmp]=0
                IncorrectTrialsTarget[tmp]=0
                tmp=tmp+1
            }

            sample_trial () // durations & target location

            goto ('Fix On')
        }
        state 'Fix On' {

 

            live_queue_stimulus(fixCircleStatic)

            update_stimulus_display ()
            tStart = now()
            startTrial = 1
            id_bad = 0

            start_timer (
                timer = fixWait
                duration = fixWaitDur // 10000
                duration_units = ms
                )
            goto (
                target = 'Static Fix'
                when = on_fix_static
                )
            timer_expired (
                target = 'Failure to fixate'
                timer = fixWait
                )
        }

        state 'Static Fix' {
            report ('localTrials = $localTrials')
            localTrials = localTrials+1

            tFix = now()
            id_bad = 1

            start_timer (
                timer = StaticFixWait
                duration = fixTimeDur // fixTimeDur=-fixTimeDurMean*logn(rand(0,1)) + fixTimeDurMin // exp_rand(fixTimeDurMean,fixTimeDurMin)
                duration_units = ms
                )
            goto (
                target = 'Bad'
                when = !on_fix_static
                )
            timer_expired (
                target = 'Number On'
                timer = StaticFixWait
                )

        }
        state 'Number On' {
            tNumberOn = next_frame_time()

            %ifdef monkey_ephys
                queue_stimulus(photodiode)
            %end

            index=0
            while (index<number){
                queue_stimulus(objects[index])
                index=index+1
            }

            update_stimulus_display () // 25ms from labjack
            id_bad = 2

            labjack_cue_on = 1

            start_timer (
                timer = timer_number_on
                duration = numberTimeDur
                duration_units = ms
                )
            goto (
                target = 'Bad'
                when = !on_fix_static
                )
            timer_expired (
                target = 'Memory'
                timer = timer_number_on
                )
        }


        state 'Memory' {
            tNumberOff = next_frame_time()
            id_bad = 3

            queue_stimulus(bring_bananas_to_target)
            index=0
            while (index<number){
                live_queue_stimulus(objects[index])
                index=index+1
            }

            /* no movie after full training
            index=0
            while (index<number){
                dequeue_stimulus(objects[index])
                index=index+1
            }
            */

            %ifdef monkey_ephys
                dequeue_stimulus(photodiode)
            %end

            update_stimulus_display () // 40ms from labjack

            labjack_cue_on = 0

            start_timer (
                timer = timer_memory
                duration = memoryTimeDur
                duration_units = ms
                )
            goto (
                target = 'Bad'
                when = !on_fix_static
                )
            timer_expired (
                target = 'Target On'
                timer = timer_memory
                )
        }

        state 'Target On' {
            tTargetOn = next_frame_time()

            queue_stimulus(number_line)
            index=0
            while (index<number){
                dequeue_stimulus(objects[index])
                index=index+1
            }
            update_stimulus_display ()

            id_bad = 4

            labjack_target_on = 1

            start_timer (
                timer = timer_target_on
                duration = targetTimeDur
                duration_units = ms
                )
            goto (
                target = 'Bad'
                when = !on_fix_static
                )
            timer_expired (
                target = 'FixOff' // 'Occluder On'
                timer = timer_target_on
                )
        }

        state 'FixOff' {
            tFixOff= next_frame_time()
            id_bad = 5

            live_queue_stimulus(target_window)
            dequeue_stimulus(fixCircleStatic)

            update_stimulus_display ()
            labjack_fix_off=1

            goto (
                target = 'Response'
                )
        }

        state 'Response' {
            id_bad = 6

            // reduce targetWait after failed responseRegister
            if (flag_response==0){
                tResponse0=now()
                flag_response=1
            }
            if (flag_response==1){
                targetWait=targetWait-(now()-tResponse0)/1000
            }

            start_timer (
                timer = timer_response
                duration = targetWait // 5000
                duration_units = ms
                )
            goto (
                target = 'post_response'
                when = on_target
                )
            timer_expired (
                target = 'Bad'
                timer = timer_response
                )
        }
        state 'post_response' {
            id_bad = 7
            tResponse= now()

            labjack_fix_off=0

            start_timer (
                timer = timer_post_response
                duration = responseRegister // 100
                duration_units = ms
                )
            goto (
                target = 'Response' // 'Failure to fixate'
                when = !on_target
                )
            timer_expired (
                target = 'Reward'
                timer = timer_post_response
                )
        }

        state 'Reward' {
            responseX = eye_x
            responseY = eye_y
            // if perfect, rewardDurMax; if responseX-objectX_final == target_win/2, 0
            rewardDur = max(0,rewardDurMax*(1-(responseX-objectX_final)*(responseX-objectX_final)/(target_win/2)/(target_win/2)))

            labjack_target_on = 0

            dequeue_stimulus(number_line)
            //queue_stimulus(chosen_target)
            queue_stimulus(objects[0])
            update_stimulus_display ()

            action/play_sound(success_sound)

            report ('Success!: CorrectTrials = $CorrectTrials')
            tRew = now()

            %ifdef monkey_ephys
                queue_stimulus(photodiode)
            %end

            CorrectTrialsTarget[number_id] = CorrectTrialsTarget[number_id]+1
            CorrectTrials = CorrectTrials+1

            start_timer (
                timer = GreenTime
                duration = post_reward_delay // 200
                duration_units = ms
                )
            timer_expired (
                target = 'Post Reward'
                timer = GreenTime
                )
        }

        state 'Post Reward'{
            %ifdef monkey_ephys
                dequeue_stimulus(photodiode)
            %end
            //dequeue_stimulus(chosen_target)
            dequeue_stimulus(objects[0])
            update_stimulus_display ()

            reward_count=reward_count+1

            pulse ( // micro seconds
                variable = reward_line
                duration = rewardDur*1000
                )
            start_timer (
                timer = GreenTime
                duration = rewardDur
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = GreenTime
                )

        }

        state 'End Trial' {
            tEnd = now()

            endTrial = endTrial+1

            // reset stimulus
            object_red=1 // target_red=1
            object_green=0.5
            object_blue=0 // target_blue=1
            object_alpha = 1 // target_alpha = 1

            elapsed_time = 0
            elapsed_time2 = 0 // for reducing contrast

            fix_red_static = 1
            fix_green_static = 1
            fix_blue_static = 1

            reward_count=0

            dequeue_stimulus (target_window)
            dequeue_stimulus(number_line)
            // dequeue_stimulus (objects)
            dequeue_stimulus (fixCircleStatic)
            dequeue_stimulus (bring_bananas_to_target)
            dequeue_stimulus(photodiode)

            index=0
            while (index<number){
                dequeue_stimulus(objects[index])
                index=index+1
            }

            id_bad = 0

            flag_response=0
            targetWait=targetWait0

            update_stimulus_display ()
            labjack_target_on = 0
            labjack_fix_off = 0
            labjack_cue_on = 0

            goto (
                target = 'Exit System'
                when = CorrectTrials >= trialNum
                )
            goto (
                target = 'Exit System'
                when = pstop
                )
            goto (ITI)
        }
        state ITI {

            sample_trial () // duration and target locations

            // override eye_x eye_y to reset trigger_flag
            // eye_x=100

            start_timer (
                timer = fix_pur_ITI
                duration = ITI // 500
                duration_units = ms
                )
            timer_expired (
                target = 'Fix On'
                timer = fix_pur_ITI
                )
        }

        state 'Failure to fixate' {
            report ('Trial Failed: id_bad = $id_bad')
            tResponse= now()

            start_timer (
                timer = NoFixWait
                duration = NoFixWaitDur  // 2000
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = NoFixWait
                )
        }


        state 'Bad' {
            report ('Trial Failed: id_bad = $id_bad')
            tResponse= now()

            if (id_bad==1 || id_bad==2 || id_bad==3){ // fixation number memory

                // red fixation
                fix_green_static = 0
                fix_blue_static = 0

                index=0
                while (index<number){
                    dequeue_stimulus(objects[index])
                    index=index+1
                }

                dequeue_stimulus (target_window)
                // dequeue_stimulus (objects)
                dequeue_stimulus (object_disappear)
                dequeue_stimulus(photodiode)
                update_stimulus_display ()
                labjack_target_on = 0
                labjack_cue_on = 0

                index=0
                while (index<number){
                    dequeue_stimulus(objects[index])
                    index=index+1
            }

            }

            if (id_bad==4 || id_bad==5 || id_bad==6){ // target fixoff response
                dequeue_stimulus(objects[0])
                dequeue_stimulus(number_line)
                update_stimulus_display ()

                labjack_cue_on = 1

                action/play_sound(failure_sound)

            }

            start_timer (
                timer = timer_timeout
                duration = timeout // 2000
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = timer_timeout
                )
        }


        state 'Exit System' {
            report ('Leaving state system')
            yield ()
        }
    }
}
